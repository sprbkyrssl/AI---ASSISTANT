import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import sys

# Malicious examples
malicious_examples = [
    'import os\nos.system("rm -rf /")',
    'import base64\nexec(base64.b64decode("ZGFuZ2Vyb3VzIGNvbW1hbmQ="))',
    'eval("__import__(\'os\').system(\'ls\')")',
    'exec(open("malware.py").read())',
    'from subprocess import Popen\nPopen(["curl", "http://malicious.site"])',
    'compile("print(1)", "<string>", "exec")',
    'getattr(__import__("os"), "system")("ls")',
    'lambda x: exec(x)',
    'open("/etc/passwd").read()',
    'os.remove("important.txt")'
]

# Safe examples
safe_examples = [
    'def add(a, b):\n    return a + b',
    'print("Hello, world!")',
    'for i in range(10):\n    print(i)',
    'with open("file.txt") as f:\n    data = f.read()',
    'def greet(name):\n    print(f"Hello, {name}")',
    'numbers = [1, 2, 3]\nsum(numbers)',
    'name = input("Enter your name: ")\nprint(name)',
    'import math\nmath.sqrt(4)',
    'x = [i for i in range(5)]',
    'def square(x):\n    return x * x'
]

# Assembling a dataset
texts = malicious_examples + safe_examples
labels = ['malicious'] * len(malicious_examples) + ['safe'] * len(safe_examples)

combined = list(zip(texts, labels))
random.shuffle(combined)
texts, labels = zip(*combined)

# Coding and training
le = LabelEncoder()
y = le.fit_transform(labels)

model = make_pipeline(
    TfidfVectorizer(),
    SGDClassifier(loss='log_loss', max_iter=1, warm_start=True)
)

for epoch in range(50):
    model.fit(texts, y)
    preds = model.predict(texts)
    acc = accuracy_score(y, preds)
    print(f"Epoch {epoch + 1}: accuracy = {acc:.2f}")

# The analysis function
def analyze_code(code_snippet):
    pred = model.predict([code_snippet])[0]
    label = le.inverse_transform([pred])[0]
    return label

# Interface
if __name__ == "__main__":
    print("\nðŸ§  Malware detector is active.")
    print("Enter the Python code line by line. An empty line is the end of the input..")
    print("Enter 'exit' to exit manually.")

    while True:
        lines = []
        print("\nEnter the code:")
        while True:
            line = input()
            if line.strip().lower() == "exit":
                print("ðŸ‘‹ Manual completion.")
                sys.exit()
            if line.strip() == "":
                break
            lines.append(line)

        code_input = "\n".join(lines)
        result = analyze_code(code_input)

        if result == "malicious":
            print("â›” Malicious code has been detected! Return to the main menu...")
            break
        else:
            print("âœ… The code is secure. You can continue.")
